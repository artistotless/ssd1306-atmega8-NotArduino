
i2cLCD_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000206  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000151b  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a9  00000000  00000000  000018b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000773  00000000  00000000  0000215c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  000028d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041f  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000591  00000000  00000000  00002ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003434  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	13 d0       	rcall	.+38     	; 0x5a <main>
  34:	e6 c0       	rjmp	.+460    	; 0x202 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <delay>:
};



void delay(short int cnt){
	for (int i =0;i<cnt;i++){
  38:	18 16       	cp	r1, r24
  3a:	19 06       	cpc	r1, r25
  3c:	6c f4       	brge	.+26     	; 0x58 <__SREG__+0x19>
  3e:	20 e0       	ldi	r18, 0x00	; 0
  40:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  42:	ef ec       	ldi	r30, 0xCF	; 207
  44:	f7 e0       	ldi	r31, 0x07	; 7
  46:	31 97       	sbiw	r30, 0x01	; 1
  48:	f1 f7       	brne	.-4      	; 0x46 <__SREG__+0x7>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <__SREG__+0xd>
  4c:	00 00       	nop
  4e:	2f 5f       	subi	r18, 0xFF	; 255
  50:	3f 4f       	sbci	r19, 0xFF	; 255
  52:	82 17       	cp	r24, r18
  54:	93 07       	cpc	r25, r19
  56:	a9 f7       	brne	.-22     	; 0x42 <__SREG__+0x3>
  58:	08 95       	ret

0000005a <main>:


int main(void)
{
	
	DDRD |= (1<<1);
  5a:	89 9a       	sbi	0x11, 1	; 17
	
	I2C_Init();
  5c:	bf d0       	rcall	.+382    	; 0x1dc <I2C_Init>
	lcdInit();
  5e:	a1 d0       	rcall	.+322    	; 0x1a2 <lcdInit>

	//Установка контрастности - 100 ( макс. 255)
	lcdSendCommand(0x81);
  60:	81 e8       	ldi	r24, 0x81	; 129
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	53 d0       	rcall	.+166    	; 0x10c <lcdSendCommand>
	lcdSendCommand(100);
  66:	84 e6       	ldi	r24, 0x64	; 100
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	50 d0       	rcall	.+160    	; 0x10c <lcdSendCommand>

	lcdClearDisplay();
  6c:	6d d0       	rcall	.+218    	; 0x148 <lcdClearDisplay>


	//Выбор режима адресации - горизонтальный
	lcdSendCommand(0x20);
  6e:	80 e2       	ldi	r24, 0x20	; 32
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	4c d0       	rcall	.+152    	; 0x10c <lcdSendCommand>
	lcdSendCommand(0x0);
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	49 d0       	rcall	.+146    	; 0x10c <lcdSendCommand>

	// Выбор столбца
	//lcdSelectSeg(0,39);
	lcdSelectSeg(10,110);
  7a:	6e e6       	ldi	r22, 0x6E	; 110
  7c:	70 e0       	ldi	r23, 0x00	; 0
  7e:	8a e0       	ldi	r24, 0x0A	; 10
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	75 d0       	rcall	.+234    	; 0x16e <lcdSelectSeg>

	//Выбор страницы
	//lcdSelectPage(3,7);
	lcdSelectPage(3,3);
  84:	63 e0       	ldi	r22, 0x03	; 3
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	83 e0       	ldi	r24, 0x03	; 3
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	7d d0       	rcall	.+250    	; 0x188 <lcdSelectPage>

	lcdSendCommand(0xA1);
  8e:	81 ea       	ldi	r24, 0xA1	; 161
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	3c d0       	rcall	.+120    	; 0x10c <lcdSendCommand>
	lcdSendCommand(0xC8);
  94:	88 ec       	ldi	r24, 0xC8	; 200
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	39 d0       	rcall	.+114    	; 0x10c <lcdSendCommand>
	int smooth = 2;

	//lcdBufferDisplay();


	for(int i = 0;i<14; i++ ){
  9a:	c0 e0       	ldi	r28, 0x00	; 0
  9c:	d0 e0       	ldi	r29, 0x00	; 0
	lcdSendCommand(0xA1);
	lcdSendCommand(0xC8);

	//Отправка бит-пикселей

	unsigned char color = 0xFF;
  9e:	1f ef       	ldi	r17, 0xFF	; 255
PORTD &= (0<<1);
	color = 0x00;
	smooth = 2;
	}else{
		PORTD |= (1<<1);
	color = 0xFF;
  a0:	0f ef       	ldi	r16, 0xFF	; 255
	if(i == 13){
		
	i=0;
	if(color == 0xFF){
PORTD &= (0<<1);
	color = 0x00;
  a2:	d1 2c       	mov	r13, r1

	//lcdBufferDisplay();


	for(int i = 0;i<14; i++ ){
	lcdSendData(color);
  a4:	e1 2e       	mov	r14, r17
  a6:	f1 2c       	mov	r15, r1
  a8:	c7 01       	movw	r24, r14
  aa:	3f d0       	rcall	.+126    	; 0x12a <lcdSendData>
	delay(smooth);
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	c3 df       	rcall	.-122    	; 0x38 <delay>
	lcdSendData(color);
  b2:	c7 01       	movw	r24, r14
  b4:	3a d0       	rcall	.+116    	; 0x12a <lcdSendData>
	delay(smooth);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	be df       	rcall	.-132    	; 0x38 <delay>
	lcdSendData(0);
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	34 d0       	rcall	.+104    	; 0x12a <lcdSendData>
	lcdSendData(0);
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	31 d0       	rcall	.+98     	; 0x12a <lcdSendData>
	delay(smooth);
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	b5 df       	rcall	.-150    	; 0x38 <delay>
	lcdSendData(color);
  ce:	c7 01       	movw	r24, r14
  d0:	2c d0       	rcall	.+88     	; 0x12a <lcdSendData>
	delay(smooth);
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	b0 df       	rcall	.-160    	; 0x38 <delay>
	lcdSendData(color);
  d8:	c7 01       	movw	r24, r14
  da:	27 d0       	rcall	.+78     	; 0x12a <lcdSendData>
	
	if(i == 13){
  dc:	cd 30       	cpi	r28, 0x0D	; 13
  de:	d1 05       	cpc	r29, r1
  e0:	81 f4       	brne	.+32     	; 0x102 <main+0xa8>
		
	i=0;
	if(color == 0xFF){
  e2:	1f 3f       	cpi	r17, 0xFF	; 255
  e4:	21 f4       	brne	.+8      	; 0xee <main+0x94>
PORTD &= (0<<1);
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	12 ba       	out	0x12, r1	; 18
	color = 0x00;
  ea:	1d 2d       	mov	r17, r13
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x98>
	smooth = 2;
	}else{
		PORTD |= (1<<1);
  ee:	91 9a       	sbi	0x12, 1	; 18
	color = 0xFF;
  f0:	10 2f       	mov	r17, r16
	smooth = 2;
	}
	lcdSelectSeg(10,110);
  f2:	6e e6       	ldi	r22, 0x6E	; 110
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	8a e0       	ldi	r24, 0x0A	; 10
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	39 d0       	rcall	.+114    	; 0x16e <lcdSelectSeg>
	int smooth = 2;

	//lcdBufferDisplay();


	for(int i = 0;i<14; i++ ){
  fc:	c1 e0       	ldi	r28, 0x01	; 1
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	d1 cf       	rjmp	.-94     	; 0xa4 <main+0x4a>
 102:	21 96       	adiw	r28, 0x01	; 1
 104:	ce 30       	cpi	r28, 0x0E	; 14
 106:	d1 05       	cpc	r29, r1
 108:	6c f2       	brlt	.-102    	; 0xa4 <main+0x4a>
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0xb0>

0000010c <lcdSendCommand>:
		
		lcdSendData(buffer[i]);
	}

	I2C_StopCondition();
}
 10c:	cf 93       	push	r28
 10e:	c8 2f       	mov	r28, r24
 110:	68 d0       	rcall	.+208    	; 0x1e2 <I2C_StartCondition>
 112:	88 e7       	ldi	r24, 0x78	; 120
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	6e d0       	rcall	.+220    	; 0x1f4 <I2C_SendByte>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	6b d0       	rcall	.+214    	; 0x1f4 <I2C_SendByte>
 11e:	8c 2f       	mov	r24, r28
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	68 d0       	rcall	.+208    	; 0x1f4 <I2C_SendByte>
 124:	64 d0       	rcall	.+200    	; 0x1ee <I2C_StopCondition>
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcdSendData>:
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
 12e:	59 d0       	rcall	.+178    	; 0x1e2 <I2C_StartCondition>
 130:	88 e7       	ldi	r24, 0x78	; 120
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	5f d0       	rcall	.+190    	; 0x1f4 <I2C_SendByte>
 136:	80 e4       	ldi	r24, 0x40	; 64
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	5c d0       	rcall	.+184    	; 0x1f4 <I2C_SendByte>
 13c:	8c 2f       	mov	r24, r28
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	59 d0       	rcall	.+178    	; 0x1f4 <I2C_SendByte>
 142:	55 d0       	rcall	.+170    	; 0x1ee <I2C_StopCondition>
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <lcdClearDisplay>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	4a d0       	rcall	.+148    	; 0x1e2 <I2C_StartCondition>
 14e:	88 e7       	ldi	r24, 0x78	; 120
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	50 d0       	rcall	.+160    	; 0x1f4 <I2C_SendByte>
 154:	80 e4       	ldi	r24, 0x40	; 64
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	4d d0       	rcall	.+154    	; 0x1f4 <I2C_SendByte>
 15a:	c0 e0       	ldi	r28, 0x00	; 0
 15c:	d4 e0       	ldi	r29, 0x04	; 4
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	e4 df       	rcall	.-56     	; 0x12a <lcdSendData>
 162:	21 97       	sbiw	r28, 0x01	; 1
 164:	e1 f7       	brne	.-8      	; 0x15e <lcdClearDisplay+0x16>
 166:	43 d0       	rcall	.+134    	; 0x1ee <I2C_StopCondition>
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <lcdSelectSeg>:
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	d8 2f       	mov	r29, r24
 174:	c6 2f       	mov	r28, r22
 176:	81 e2       	ldi	r24, 0x21	; 33
 178:	c9 df       	rcall	.-110    	; 0x10c <lcdSendCommand>
 17a:	8d 2f       	mov	r24, r29
 17c:	c7 df       	rcall	.-114    	; 0x10c <lcdSendCommand>
 17e:	8c 2f       	mov	r24, r28
 180:	c5 df       	rcall	.-118    	; 0x10c <lcdSendCommand>
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <lcdSelectPage>:
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	d8 2f       	mov	r29, r24
 18e:	c6 2f       	mov	r28, r22
 190:	82 e2       	ldi	r24, 0x22	; 34
 192:	bc df       	rcall	.-136    	; 0x10c <lcdSendCommand>
 194:	8d 2f       	mov	r24, r29
 196:	ba df       	rcall	.-140    	; 0x10c <lcdSendCommand>
 198:	8c 2f       	mov	r24, r28
 19a:	b8 df       	rcall	.-144    	; 0x10c <lcdSendCommand>
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <lcdInit>:

void lcdInit(){
	lcdSendCommand(0x8D);
 1a2:	8d e8       	ldi	r24, 0x8D	; 141
 1a4:	b3 df       	rcall	.-154    	; 0x10c <lcdSendCommand>
	lcdSendCommand(0x14);
 1a6:	84 e1       	ldi	r24, 0x14	; 20
 1a8:	b1 df       	rcall	.-158    	; 0x10c <lcdSendCommand>
	lcdSendCommand(0x20);
 1aa:	80 e2       	ldi	r24, 0x20	; 32
 1ac:	af df       	rcall	.-162    	; 0x10c <lcdSendCommand>
	lcdSendCommand(0x00);
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	ad df       	rcall	.-166    	; 0x10c <lcdSendCommand>
	lcdSendCommand(0xA0 | 0x01);
 1b2:	81 ea       	ldi	r24, 0xA1	; 161
 1b4:	ab df       	rcall	.-170    	; 0x10c <lcdSendCommand>
	lcdSendCommand(0xC8);
 1b6:	88 ec       	ldi	r24, 0xC8	; 200
 1b8:	a9 df       	rcall	.-174    	; 0x10c <lcdSendCommand>
	lcdSendCommand(0x81);
 1ba:	81 e8       	ldi	r24, 0x81	; 129
 1bc:	a7 df       	rcall	.-178    	; 0x10c <lcdSendCommand>
	lcdSendCommand(100);
 1be:	84 e6       	ldi	r24, 0x64	; 100
 1c0:	a5 df       	rcall	.-182    	; 0x10c <lcdSendCommand>
	lcdSendCommand(0xD9);
 1c2:	89 ed       	ldi	r24, 0xD9	; 217
 1c4:	a3 df       	rcall	.-186    	; 0x10c <lcdSendCommand>
	lcdSendCommand(0xF1);
 1c6:	81 ef       	ldi	r24, 0xF1	; 241
 1c8:	a1 df       	rcall	.-190    	; 0x10c <lcdSendCommand>
	lcdSendCommand(0xAF);
 1ca:	8f ea       	ldi	r24, 0xAF	; 175
 1cc:	9f df       	rcall	.-194    	; 0x10c <lcdSendCommand>
 1ce:	8f eb       	ldi	r24, 0xBF	; 191
 1d0:	9d e5       	ldi	r25, 0x5D	; 93
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcdInit+0x30>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcdInit+0x36>
 1d8:	00 00       	nop
 1da:	08 95       	ret

000001dc <I2C_Init>:

//  TWBR = ((F_CPU / 400000L) - 16) / 2; 
//	TWBR=0x48;//СЃРєРѕСЂРѕСЃС‚СЊ РїРµСЂРµРґР°С‡Рё (РїСЂРё 16 РјРіС† РїРѕР»СѓС‡Р°РµС‚СЃСЏ 100 РєРіС†)
//	TWBR=0x20;//СЃРєРѕСЂРѕСЃС‚СЊ РїРµСЂРµРґР°С‡Рё (РїСЂРё 8 РјРіС† РїРѕР»СѓС‡Р°РµС‚СЃСЏ 100 РєРіС†)
//	TWBR=0x12;//СЃРєРѕСЂРѕСЃС‚СЊ РїРµСЂРµРґР°С‡Рё (РїСЂРё 16 РјРіС† РїРѕР»СѓС‡Р°РµС‚СЃСЏ 400 РєРіС†)
	TWBR=2;//СЃРєРѕСЂРѕСЃС‚СЊ РїРµСЂРµРґР°С‡Рё (РїСЂРё 8 РјРіС† РїРѕР»СѓС‡Р°РµС‚СЃСЏ 400 РєРіС†)
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	80 b9       	out	0x00, r24	; 0
 1e0:	08 95       	ret

000001e2 <I2C_StartCondition>:
}


void I2C_StartCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 1e2:	84 ea       	ldi	r24, 0xA4	; 164
 1e4:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//РїРѕРґРѕР¶РґРµРј РїРѕРєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЃСЏ TWIN
 1e6:	06 b6       	in	r0, 0x36	; 54
 1e8:	07 fe       	sbrs	r0, 7
 1ea:	fd cf       	rjmp	.-6      	; 0x1e6 <I2C_StartCondition+0x4>
}
 1ec:	08 95       	ret

000001ee <I2C_StopCondition>:

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 1ee:	84 e9       	ldi	r24, 0x94	; 148
 1f0:	86 bf       	out	0x36, r24	; 54
 1f2:	08 95       	ret

000001f4 <I2C_SendByte>:
}

void I2C_SendByte(unsigned char c)
{
	TWDR = c;//Р·Р°РїРёС€РµРј Р±Р°Р№С‚ РІ СЂРµРіРёСЃС‚СЂ РґР°РЅРЅС‹С…
 1f4:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);//РІРєР»СЋС‡РёРј РїРµСЂРµРґР°С‡Сѓ Р±Р°Р№С‚Р°
 1f6:	84 e8       	ldi	r24, 0x84	; 132
 1f8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//РїРѕРґРѕР¶РґРµРј РїРѕРєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЃСЏ TWIN
 1fa:	06 b6       	in	r0, 0x36	; 54
 1fc:	07 fe       	sbrs	r0, 7
 1fe:	fd cf       	rjmp	.-6      	; 0x1fa <I2C_SendByte+0x6>
}
 200:	08 95       	ret

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
