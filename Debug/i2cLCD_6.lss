
i2cLCD_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000025c  00800060  000009c8  00000a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cf4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017e2  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000973  00000000  00000000  0000261a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c1  00000000  00000000  00002f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00003850  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bf  00000000  00000000  00003ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ec  00000000  00000000  00003f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  0000475f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	12 e0       	ldi	r17, 0x02	; 2
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ec       	ldi	r30, 0xC8	; 200
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 3b       	cpi	r26, 0xBC	; 188
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	19 d0       	rcall	.+50     	; 0x7c <main>
  4a:	bc c4       	rjmp	.+2424   	; 0x9c4 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <getAsciiBytes>:
	0x00, 0x7F, 0x41, 0x7F, 0x00       // Code for char 
};

unsigned char * getAsciiBytes(){
	return ascii_bytes;
}
  4e:	80 e6       	ldi	r24, 0x60	; 96
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	08 95       	ret

00000054 <getAsciiSymbols>:
unsigned char * getAsciiSymbols(){
	return ascii_symbols;
  54:	80 e4       	ldi	r24, 0x40	; 64
  56:	92 e0       	ldi	r25, 0x02	; 2
  58:	08 95       	ret

0000005a <delay>:
};



void delay(short int cnt){
	for (int i =0;i<cnt;i++){
  5a:	18 16       	cp	r1, r24
  5c:	19 06       	cpc	r1, r25
  5e:	6c f4       	brge	.+26     	; 0x7a <delay+0x20>
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  64:	ef ec       	ldi	r30, 0xCF	; 207
  66:	f7 e0       	ldi	r31, 0x07	; 7
  68:	31 97       	sbiw	r30, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <delay+0xe>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <delay+0x14>
  6e:	00 00       	nop
  70:	2f 5f       	subi	r18, 0xFF	; 255
  72:	3f 4f       	sbci	r19, 0xFF	; 255
  74:	82 17       	cp	r24, r18
  76:	93 07       	cpc	r25, r19
  78:	a9 f7       	brne	.-22     	; 0x64 <delay+0xa>
  7a:	08 95       	ret

0000007c <main>:
}



int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	2b 97       	sbiw	r28, 0x0b	; 11
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
	
	DDRD |= (1<<1);
  90:	89 9a       	sbi	0x11, 1	; 17
	
	I2C_Init();
  92:	ad d1       	rcall	.+858    	; 0x3ee <I2C_Init>
	lcdInit();
  94:	8f d1       	rcall	.+798    	; 0x3b4 <lcdInit>

	//Установка контрастности - 100 ( макс. 255)
	lcdSendCommand(0x81);
  96:	81 e8       	ldi	r24, 0x81	; 129
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	c6 d0       	rcall	.+396    	; 0x228 <lcdSendCommand>
	lcdSendCommand(100);
  9c:	84 e6       	ldi	r24, 0x64	; 100
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	c3 d0       	rcall	.+390    	; 0x228 <lcdSendCommand>

	lcdClearDisplay();
  a2:	61 d1       	rcall	.+706    	; 0x366 <lcdClearDisplay>


	//Выбор режима адресации - горизонтальный
	lcdSendCommand(0x20);
  a4:	80 e2       	ldi	r24, 0x20	; 32
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	bf d0       	rcall	.+382    	; 0x228 <lcdSendCommand>
	lcdSendCommand(2);
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	bc d0       	rcall	.+376    	; 0x228 <lcdSendCommand>

	// Выбор столбца
	//lcdSelectSeg(0,39);
	lcdSelectSeg(10,110);
  b0:	6e e6       	ldi	r22, 0x6E	; 110
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	8a e0       	ldi	r24, 0x0A	; 10
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	63 d1       	rcall	.+710    	; 0x380 <lcdSelectSeg>
	
	//Выбор страницы
	//lcdSelectPage(3,7);
	lcdSelectPage(3,3);
  ba:	63 e0       	ldi	r22, 0x03	; 3
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	6b d1       	rcall	.+726    	; 0x39a <lcdSelectPage>

	lcdSendCommand(0xA1);
  c4:	81 ea       	ldi	r24, 0xA1	; 161
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	af d0       	rcall	.+350    	; 0x228 <lcdSendCommand>
	lcdSendCommand(0xC8);
  ca:	88 ec       	ldi	r24, 0xC8	; 200
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	ac d0       	rcall	.+344    	; 0x228 <lcdSendCommand>
	int temp = 0;


	

	lcdTextDisplay("a t m e g a 8");
  d0:	8f e9       	ldi	r24, 0x9F	; 159
  d2:	92 e0       	ldi	r25, 0x02	; 2
  d4:	b2 d0       	rcall	.+356    	; 0x23a <lcdTextDisplay>

	lcdSelectPage(5,5);
  d6:	65 e0       	ldi	r22, 0x05	; 5
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	5d d1       	rcall	.+698    	; 0x39a <lcdSelectPage>
	lcdSelectSeg(10,110);
  e0:	6e e6       	ldi	r22, 0x6E	; 110
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	8a e0       	ldi	r24, 0x0A	; 10
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	4b d1       	rcall	.+662    	; 0x380 <lcdSelectSeg>
	int signal = 1;
	for(int i = 0;i<=18; i++ ){
  ea:	e1 2c       	mov	r14, r1
  ec:	f1 2c       	mov	r15, r1

	lcdTextDisplay("a t m e g a 8");

	lcdSelectPage(5,5);
	lcdSelectSeg(10,110);
	int signal = 1;
  ee:	cc 24       	eor	r12, r12
  f0:	c3 94       	inc	r12
  f2:	d1 2c       	mov	r13, r1
	int smooth = 2;

	//lcdBufferDisplay();

	char strp[11];
	int temp = 0;
  f4:	00 e0       	ldi	r16, 0x00	; 0
  f6:	10 e0       	ldi	r17, 0x00	; 0
	lcdSendCommand(0xA1);
	lcdSendCommand(0xC8);

	//Отправка бит-пикселей

	unsigned char color = 0xFF;
  f8:	99 24       	eor	r9, r9
  fa:	9a 94       	dec	r9
			signal=1;
			}
			lcdSelectSeg(10,110);
			
			lcdTextDisplay("Loading: ");
			lcdTextDisplay(strp);
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	5c 01       	movw	r10, r24
			if(temp < 100){temp++;}
			if(temp>=100){temp=0;}
			sprintf(strp,"%d",temp);
 102:	0f 2e       	mov	r0, r31
 104:	f7 eb       	ldi	r31, 0xB7	; 183
 106:	4f 2e       	mov	r4, r31
 108:	f2 e0       	ldi	r31, 0x02	; 2
 10a:	5f 2e       	mov	r5, r31
 10c:	f0 2d       	mov	r31, r0
				PORTD &= (0<<1);
				color = 0x00;
				smooth = 2;
				}else{
				PORTD |= (1<<1);
				color = 0xFF;
 10e:	77 24       	eor	r7, r7
 110:	7a 94       	dec	r7
			lcdTextDisplay("%");
			
			i=0;
			if(color == 0xFF){
				PORTD &= (0<<1);
				color = 0x00;
 112:	81 2c       	mov	r8, r1

	lcdSelectPage(5,5);
	lcdSelectSeg(10,110);
	int signal = 1;
	for(int i = 0;i<=18; i++ ){
		lcdSendData(color);
 114:	29 2c       	mov	r2, r9
 116:	31 2c       	mov	r3, r1
 118:	c1 01       	movw	r24, r2
 11a:	1c d1       	rcall	.+568    	; 0x354 <lcdSendData>
		delay(smooth);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	9c df       	rcall	.-200    	; 0x5a <delay>
		lcdSendData(color);
 122:	c1 01       	movw	r24, r2
 124:	17 d1       	rcall	.+558    	; 0x354 <lcdSendData>
		delay(smooth);
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	97 df       	rcall	.-210    	; 0x5a <delay>
		lcdSendData(0);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	11 d1       	rcall	.+546    	; 0x354 <lcdSendData>
		lcdSendData(0);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e d1       	rcall	.+540    	; 0x354 <lcdSendData>
		delay(smooth);
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	8e df       	rcall	.-228    	; 0x5a <delay>

		
		if(i == 17){
 13e:	91 e1       	ldi	r25, 0x11	; 17
 140:	e9 16       	cp	r14, r25
 142:	f1 04       	cpc	r15, r1
 144:	09 f0       	breq	.+2      	; 0x148 <main+0xcc>
 146:	57 c0       	rjmp	.+174    	; 0x1f6 <main+0x17a>
			lcdSelectPage(1,1);
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	24 d1       	rcall	.+584    	; 0x39a <lcdSelectPage>
			lcdSelectSeg(120,120);
 152:	68 e7       	ldi	r22, 0x78	; 120
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	88 e7       	ldi	r24, 0x78	; 120
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	12 d1       	rcall	.+548    	; 0x380 <lcdSelectSeg>
			if(signal==1){
 15c:	ca 94       	dec	r12
 15e:	cd 28       	or	r12, r13
 160:	31 f4       	brne	.+12     	; 0x16e <main+0xf2>
			lcdSendData(0x18);
 162:	88 e1       	ldi	r24, 0x18	; 24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	f6 d0       	rcall	.+492    	; 0x354 <lcdSendData>
			signal=0;
 168:	c1 2c       	mov	r12, r1
 16a:	d1 2c       	mov	r13, r1
 16c:	06 c0       	rjmp	.+12     	; 0x17a <main+0xfe>
			}else{
			lcdSendData(0x00);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	f0 d0       	rcall	.+480    	; 0x354 <lcdSendData>
			signal=1;
 174:	cc 24       	eor	r12, r12
 176:	c3 94       	inc	r12
 178:	d1 2c       	mov	r13, r1
			}
			lcdSelectSeg(10,110);
 17a:	6e e6       	ldi	r22, 0x6E	; 110
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	8a e0       	ldi	r24, 0x0A	; 10
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	fe d0       	rcall	.+508    	; 0x380 <lcdSelectSeg>
			
			lcdTextDisplay("Loading: ");
 184:	8d ea       	ldi	r24, 0xAD	; 173
 186:	92 e0       	ldi	r25, 0x02	; 2
 188:	58 d0       	rcall	.+176    	; 0x23a <lcdTextDisplay>
			lcdTextDisplay(strp);
 18a:	c5 01       	movw	r24, r10
 18c:	56 d0       	rcall	.+172    	; 0x23a <lcdTextDisplay>
			if(temp < 100){temp++;}
 18e:	04 36       	cpi	r16, 0x64	; 100
 190:	11 05       	cpc	r17, r1
 192:	44 f4       	brge	.+16     	; 0x1a4 <main+0x128>
 194:	0f 5f       	subi	r16, 0xFF	; 255
 196:	1f 4f       	sbci	r17, 0xFF	; 255
			if(temp>=100){temp=0;}
 198:	04 36       	cpi	r16, 0x64	; 100
 19a:	11 05       	cpc	r17, r1
 19c:	2c f0       	brlt	.+10     	; 0x1a8 <main+0x12c>
 19e:	00 e0       	ldi	r16, 0x00	; 0
 1a0:	10 e0       	ldi	r17, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <main+0x12c>
 1a4:	00 e0       	ldi	r16, 0x00	; 0
 1a6:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(strp,"%d",temp);
 1a8:	1f 93       	push	r17
 1aa:	0f 93       	push	r16
 1ac:	5f 92       	push	r5
 1ae:	4f 92       	push	r4
 1b0:	bf 92       	push	r11
 1b2:	af 92       	push	r10
 1b4:	2f d1       	rcall	.+606    	; 0x414 <sprintf>
			lcdTextDisplay("%");
 1b6:	8a eb       	ldi	r24, 0xBA	; 186
 1b8:	92 e0       	ldi	r25, 0x02	; 2
 1ba:	3f d0       	rcall	.+126    	; 0x23a <lcdTextDisplay>
			
			i=0;
			if(color == 0xFF){
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	9f ef       	ldi	r25, 0xFF	; 255
 1ca:	99 12       	cpse	r9, r25
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <main+0x15a>
				PORTD &= (0<<1);
 1ce:	82 b3       	in	r24, 0x12	; 18
 1d0:	12 ba       	out	0x12, r1	; 18
				color = 0x00;
 1d2:	98 2c       	mov	r9, r8
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <main+0x15e>
				smooth = 2;
				}else{
				PORTD |= (1<<1);
 1d6:	91 9a       	sbi	0x12, 1	; 18
				color = 0xFF;
 1d8:	97 2c       	mov	r9, r7
				smooth = 2;
			}
			lcdSelectSeg(10,110);
 1da:	6e e6       	ldi	r22, 0x6E	; 110
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	8a e0       	ldi	r24, 0x0A	; 10
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	ce d0       	rcall	.+412    	; 0x380 <lcdSelectSeg>
			lcdSelectPage(5,5);
 1e4:	65 e0       	ldi	r22, 0x05	; 5
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	d6 d0       	rcall	.+428    	; 0x39a <lcdSelectPage>
	lcdTextDisplay("a t m e g a 8");

	lcdSelectPage(5,5);
	lcdSelectSeg(10,110);
	int signal = 1;
	for(int i = 0;i<=18; i++ ){
 1ee:	ee 24       	eor	r14, r14
 1f0:	e3 94       	inc	r14
 1f2:	f1 2c       	mov	r15, r1
 1f4:	8f cf       	rjmp	.-226    	; 0x114 <main+0x98>
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	e8 1a       	sub	r14, r24
 1fa:	f8 0a       	sbc	r15, r24
 1fc:	93 e1       	ldi	r25, 0x13	; 19
 1fe:	e9 16       	cp	r14, r25
 200:	f1 04       	cpc	r15, r1
 202:	0c f4       	brge	.+2      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 204:	87 cf       	rjmp	.-242    	; 0x114 <main+0x98>
 206:	ff cf       	rjmp	.-2      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>

00000208 <commandBytes>:
		
		lcdSendData(buffer[i]);
	}

	I2C_StopCondition();
}
 208:	f5 d0       	rcall	.+490    	; 0x3f4 <I2C_StartCondition>
 20a:	88 e7       	ldi	r24, 0x78	; 120
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	fb d0       	rcall	.+502    	; 0x406 <I2C_SendByte>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	f8 d0       	rcall	.+496    	; 0x406 <I2C_SendByte>
 216:	08 95       	ret

00000218 <dataBytes>:
 218:	ed d0       	rcall	.+474    	; 0x3f4 <I2C_StartCondition>
 21a:	88 e7       	ldi	r24, 0x78	; 120
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	f3 d0       	rcall	.+486    	; 0x406 <I2C_SendByte>
 220:	80 e4       	ldi	r24, 0x40	; 64
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	f0 d0       	rcall	.+480    	; 0x406 <I2C_SendByte>
 226:	08 95       	ret

00000228 <lcdSendCommand>:
 228:	cf 93       	push	r28
 22a:	c8 2f       	mov	r28, r24
 22c:	ed df       	rcall	.-38     	; 0x208 <commandBytes>
 22e:	8c 2f       	mov	r24, r28
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	e9 d0       	rcall	.+466    	; 0x406 <I2C_SendByte>
 234:	e5 d0       	rcall	.+458    	; 0x400 <I2C_StopCondition>
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <lcdTextDisplay>:
 23a:	2f 92       	push	r2
 23c:	3f 92       	push	r3
 23e:	4f 92       	push	r4
 240:	5f 92       	push	r5
 242:	6f 92       	push	r6
 244:	7f 92       	push	r7
 246:	8f 92       	push	r8
 248:	9f 92       	push	r9
 24a:	af 92       	push	r10
 24c:	bf 92       	push	r11
 24e:	cf 92       	push	r12
 250:	df 92       	push	r13
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	28 97       	sbiw	r28, 0x08	; 8
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	9a 83       	std	Y+2, r25	; 0x02
 270:	89 83       	std	Y+1, r24	; 0x01
 272:	d2 df       	rcall	.-92     	; 0x218 <dataBytes>
 274:	ef de       	rcall	.-546    	; 0x54 <getAsciiSymbols>
 276:	8d 83       	std	Y+5, r24	; 0x05
 278:	9e 83       	std	Y+6, r25	; 0x06
 27a:	e9 de       	rcall	.-558    	; 0x4e <getAsciiBytes>
 27c:	9c 83       	std	Y+4, r25	; 0x04
 27e:	8b 83       	std	Y+3, r24	; 0x03
 280:	c9 80       	ldd	r12, Y+1	; 0x01
 282:	da 80       	ldd	r13, Y+2	; 0x02
 284:	21 2c       	mov	r2, r1
 286:	31 2c       	mov	r3, r1
 288:	3c 01       	movw	r6, r24
 28a:	5c 01       	movw	r10, r24
 28c:	85 e2       	ldi	r24, 0x25	; 37
 28e:	a8 1a       	sub	r10, r24
 290:	8e ef       	ldi	r24, 0xFE	; 254
 292:	b8 0a       	sbc	r11, r24
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	2c 01       	movw	r4, r24
 29a:	46 18       	sub	r4, r6
 29c:	57 08       	sbc	r5, r7
 29e:	2e c0       	rjmp	.+92     	; 0x2fc <lcdTextDisplay+0xc2>
 2a0:	f8 01       	movw	r30, r16
 2a2:	81 91       	ld	r24, Z+
 2a4:	8f 01       	movw	r16, r30
 2a6:	f6 01       	movw	r30, r12
 2a8:	90 81       	ld	r25, Z
 2aa:	98 13       	cpse	r25, r24
 2ac:	1b c0       	rjmp	.+54     	; 0x2e4 <lcdTextDisplay+0xaa>
 2ae:	92 01       	movw	r18, r4
 2b0:	28 0d       	add	r18, r8
 2b2:	39 1d       	adc	r19, r9
 2b4:	c4 01       	movw	r24, r8
 2b6:	86 19       	sub	r24, r6
 2b8:	97 09       	sbc	r25, r7
 2ba:	82 17       	cp	r24, r18
 2bc:	93 07       	cpc	r25, r19
 2be:	94 f4       	brge	.+36     	; 0x2e4 <lcdTextDisplay+0xaa>
 2c0:	74 01       	movw	r14, r8
 2c2:	f5 e0       	ldi	r31, 0x05	; 5
 2c4:	ef 0e       	add	r14, r31
 2c6:	f1 1c       	adc	r15, r1
 2c8:	98 86       	std	Y+8, r9	; 0x08
 2ca:	8f 82       	std	Y+7, r8	; 0x07
 2cc:	ef 81       	ldd	r30, Y+7	; 0x07
 2ce:	f8 85       	ldd	r31, Y+8	; 0x08
 2d0:	81 91       	ld	r24, Z+
 2d2:	f8 87       	std	Y+8, r31	; 0x08
 2d4:	ef 83       	std	Y+7, r30	; 0x07
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	96 d0       	rcall	.+300    	; 0x406 <I2C_SendByte>
 2da:	8f 81       	ldd	r24, Y+7	; 0x07
 2dc:	98 85       	ldd	r25, Y+8	; 0x08
 2de:	8e 15       	cp	r24, r14
 2e0:	9f 05       	cpc	r25, r15
 2e2:	a1 f7       	brne	.-24     	; 0x2cc <lcdTextDisplay+0x92>
 2e4:	95 e0       	ldi	r25, 0x05	; 5
 2e6:	89 0e       	add	r8, r25
 2e8:	91 1c       	adc	r9, r1
 2ea:	8a 14       	cp	r8, r10
 2ec:	9b 04       	cpc	r9, r11
 2ee:	c1 f6       	brne	.-80     	; 0x2a0 <lcdTextDisplay+0x66>
 2f0:	ef ef       	ldi	r30, 0xFF	; 255
 2f2:	2e 1a       	sub	r2, r30
 2f4:	3e 0a       	sbc	r3, r30
 2f6:	ff ef       	ldi	r31, 0xFF	; 255
 2f8:	cf 1a       	sub	r12, r31
 2fa:	df 0a       	sbc	r13, r31
 2fc:	e9 81       	ldd	r30, Y+1	; 0x01
 2fe:	fa 81       	ldd	r31, Y+2	; 0x02
 300:	01 90       	ld	r0, Z+
 302:	00 20       	and	r0, r0
 304:	e9 f7       	brne	.-6      	; 0x300 <lcdTextDisplay+0xc6>
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	9a 81       	ldd	r25, Y+2	; 0x02
 30c:	e8 1b       	sub	r30, r24
 30e:	f9 0b       	sbc	r31, r25
 310:	2e 16       	cp	r2, r30
 312:	3f 06       	cpc	r3, r31
 314:	28 f4       	brcc	.+10     	; 0x320 <lcdTextDisplay+0xe6>
 316:	0d 81       	ldd	r16, Y+5	; 0x05
 318:	1e 81       	ldd	r17, Y+6	; 0x06
 31a:	8b 80       	ldd	r8, Y+3	; 0x03
 31c:	9c 80       	ldd	r9, Y+4	; 0x04
 31e:	c0 cf       	rjmp	.-128    	; 0x2a0 <lcdTextDisplay+0x66>
 320:	6f d0       	rcall	.+222    	; 0x400 <I2C_StopCondition>
 322:	28 96       	adiw	r28, 0x08	; 8
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	de bf       	out	0x3e, r29	; 62
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	cd bf       	out	0x3d, r28	; 61
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	df 90       	pop	r13
 33c:	cf 90       	pop	r12
 33e:	bf 90       	pop	r11
 340:	af 90       	pop	r10
 342:	9f 90       	pop	r9
 344:	8f 90       	pop	r8
 346:	7f 90       	pop	r7
 348:	6f 90       	pop	r6
 34a:	5f 90       	pop	r5
 34c:	4f 90       	pop	r4
 34e:	3f 90       	pop	r3
 350:	2f 90       	pop	r2
 352:	08 95       	ret

00000354 <lcdSendData>:
 354:	cf 93       	push	r28
 356:	c8 2f       	mov	r28, r24
 358:	5f df       	rcall	.-322    	; 0x218 <dataBytes>
 35a:	8c 2f       	mov	r24, r28
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	53 d0       	rcall	.+166    	; 0x406 <I2C_SendByte>
 360:	4f d0       	rcall	.+158    	; 0x400 <I2C_StopCondition>
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <lcdClearDisplay>:
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	56 df       	rcall	.-340    	; 0x218 <dataBytes>
 36c:	c0 e0       	ldi	r28, 0x00	; 0
 36e:	d4 e0       	ldi	r29, 0x04	; 4
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	f0 df       	rcall	.-32     	; 0x354 <lcdSendData>
 374:	21 97       	sbiw	r28, 0x01	; 1
 376:	e1 f7       	brne	.-8      	; 0x370 <lcdClearDisplay+0xa>
 378:	43 d0       	rcall	.+134    	; 0x400 <I2C_StopCondition>
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <lcdSelectSeg>:
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	d8 2f       	mov	r29, r24
 386:	c6 2f       	mov	r28, r22
 388:	81 e2       	ldi	r24, 0x21	; 33
 38a:	4e df       	rcall	.-356    	; 0x228 <lcdSendCommand>
 38c:	8d 2f       	mov	r24, r29
 38e:	4c df       	rcall	.-360    	; 0x228 <lcdSendCommand>
 390:	8c 2f       	mov	r24, r28
 392:	4a df       	rcall	.-364    	; 0x228 <lcdSendCommand>
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <lcdSelectPage>:
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	d8 2f       	mov	r29, r24
 3a0:	c6 2f       	mov	r28, r22
 3a2:	82 e2       	ldi	r24, 0x22	; 34
 3a4:	41 df       	rcall	.-382    	; 0x228 <lcdSendCommand>
 3a6:	8d 2f       	mov	r24, r29
 3a8:	3f df       	rcall	.-386    	; 0x228 <lcdSendCommand>
 3aa:	8c 2f       	mov	r24, r28
 3ac:	3d df       	rcall	.-390    	; 0x228 <lcdSendCommand>
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <lcdInit>:

//Инициализация дисплея
void lcdInit(){
	lcdSendCommand(0x8D);
 3b4:	8d e8       	ldi	r24, 0x8D	; 141
 3b6:	38 df       	rcall	.-400    	; 0x228 <lcdSendCommand>
	lcdSendCommand(0x14);
 3b8:	84 e1       	ldi	r24, 0x14	; 20
 3ba:	36 df       	rcall	.-404    	; 0x228 <lcdSendCommand>
	lcdSendCommand(0x20);
 3bc:	80 e2       	ldi	r24, 0x20	; 32
 3be:	34 df       	rcall	.-408    	; 0x228 <lcdSendCommand>
	lcdSendCommand(0x00);
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	32 df       	rcall	.-412    	; 0x228 <lcdSendCommand>
	lcdSendCommand(0xA0 | 0x01);
 3c4:	81 ea       	ldi	r24, 0xA1	; 161
 3c6:	30 df       	rcall	.-416    	; 0x228 <lcdSendCommand>
	lcdSendCommand(0xC8);
 3c8:	88 ec       	ldi	r24, 0xC8	; 200
 3ca:	2e df       	rcall	.-420    	; 0x228 <lcdSendCommand>
	lcdSendCommand(0x81);
 3cc:	81 e8       	ldi	r24, 0x81	; 129
 3ce:	2c df       	rcall	.-424    	; 0x228 <lcdSendCommand>
	lcdSendCommand(100);
 3d0:	84 e6       	ldi	r24, 0x64	; 100
 3d2:	2a df       	rcall	.-428    	; 0x228 <lcdSendCommand>
	lcdSendCommand(0xD9);
 3d4:	89 ed       	ldi	r24, 0xD9	; 217
 3d6:	28 df       	rcall	.-432    	; 0x228 <lcdSendCommand>
	lcdSendCommand(0xF1);
 3d8:	81 ef       	ldi	r24, 0xF1	; 241
 3da:	26 df       	rcall	.-436    	; 0x228 <lcdSendCommand>
	lcdSendCommand(0xAF);
 3dc:	8f ea       	ldi	r24, 0xAF	; 175
 3de:	24 df       	rcall	.-440    	; 0x228 <lcdSendCommand>
 3e0:	8f e0       	ldi	r24, 0x0F	; 15
 3e2:	97 e2       	ldi	r25, 0x27	; 39
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcdInit+0x30>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <lcdInit+0x36>
 3ea:	00 00       	nop
 3ec:	08 95       	ret

000003ee <I2C_Init>:

//  TWBR = ((F_CPU / 400000L) - 16) / 2; 
//	TWBR=0x48;//СЃРєРѕСЂРѕСЃС‚СЊ РїРµСЂРµРґР°С‡Рё (РїСЂРё 16 РјРіС† РїРѕР»СѓС‡Р°РµС‚СЃСЏ 100 РєРіС†)
//	TWBR=0x20;//СЃРєРѕСЂРѕСЃС‚СЊ РїРµСЂРµРґР°С‡Рё (РїСЂРё 8 РјРіС† РїРѕР»СѓС‡Р°РµС‚СЃСЏ 100 РєРіС†)
//	TWBR=0x12;//СЃРєРѕСЂРѕСЃС‚СЊ РїРµСЂРµРґР°С‡Рё (РїСЂРё 16 РјРіС† РїРѕР»СѓС‡Р°РµС‚СЃСЏ 400 РєРіС†)
	TWBR=2;//СЃРєРѕСЂРѕСЃС‚СЊ РїРµСЂРµРґР°С‡Рё (РїСЂРё 8 РјРіС† РїРѕР»СѓС‡Р°РµС‚СЃСЏ 400 РєРіС†)
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	80 b9       	out	0x00, r24	; 0
 3f2:	08 95       	ret

000003f4 <I2C_StartCondition>:
}


void I2C_StartCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 3f4:	84 ea       	ldi	r24, 0xA4	; 164
 3f6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//РїРѕРґРѕР¶РґРµРј РїРѕРєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЃСЏ TWIN
 3f8:	06 b6       	in	r0, 0x36	; 54
 3fa:	07 fe       	sbrs	r0, 7
 3fc:	fd cf       	rjmp	.-6      	; 0x3f8 <I2C_StartCondition+0x4>
}
 3fe:	08 95       	ret

00000400 <I2C_StopCondition>:

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 400:	84 e9       	ldi	r24, 0x94	; 148
 402:	86 bf       	out	0x36, r24	; 54
 404:	08 95       	ret

00000406 <I2C_SendByte>:
}

void I2C_SendByte(unsigned char c)
{
	TWDR = c;//Р·Р°РїРёС€РµРј Р±Р°Р№С‚ РІ СЂРµРіРёСЃС‚СЂ РґР°РЅРЅС‹С…
 406:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);//РІРєР»СЋС‡РёРј РїРµСЂРµРґР°С‡Сѓ Р±Р°Р№С‚Р°
 408:	84 e8       	ldi	r24, 0x84	; 132
 40a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//РїРѕРґРѕР¶РґРµРј РїРѕРєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЃСЏ TWIN
 40c:	06 b6       	in	r0, 0x36	; 54
 40e:	07 fe       	sbrs	r0, 7
 410:	fd cf       	rjmp	.-6      	; 0x40c <I2C_SendByte+0x6>
}
 412:	08 95       	ret

00000414 <sprintf>:
 414:	ae e0       	ldi	r26, 0x0E	; 14
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	ef e0       	ldi	r30, 0x0F	; 15
 41a:	f2 e0       	ldi	r31, 0x02	; 2
 41c:	aa c2       	rjmp	.+1364   	; 0x972 <__prologue_saves__+0x1c>
 41e:	0d 89       	ldd	r16, Y+21	; 0x15
 420:	1e 89       	ldd	r17, Y+22	; 0x16
 422:	86 e0       	ldi	r24, 0x06	; 6
 424:	8c 83       	std	Y+4, r24	; 0x04
 426:	1a 83       	std	Y+2, r17	; 0x02
 428:	09 83       	std	Y+1, r16	; 0x01
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	9f e7       	ldi	r25, 0x7F	; 127
 42e:	9e 83       	std	Y+6, r25	; 0x06
 430:	8d 83       	std	Y+5, r24	; 0x05
 432:	ae 01       	movw	r20, r28
 434:	47 5e       	subi	r20, 0xE7	; 231
 436:	5f 4f       	sbci	r21, 0xFF	; 255
 438:	6f 89       	ldd	r22, Y+23	; 0x17
 43a:	78 8d       	ldd	r23, Y+24	; 0x18
 43c:	ce 01       	movw	r24, r28
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	08 d0       	rcall	.+16     	; 0x452 <vfprintf>
 442:	ef 81       	ldd	r30, Y+7	; 0x07
 444:	f8 85       	ldd	r31, Y+8	; 0x08
 446:	e0 0f       	add	r30, r16
 448:	f1 1f       	adc	r31, r17
 44a:	10 82       	st	Z, r1
 44c:	2e 96       	adiw	r28, 0x0e	; 14
 44e:	e4 e0       	ldi	r30, 0x04	; 4
 450:	ac c2       	rjmp	.+1368   	; 0x9aa <__epilogue_restores__+0x1c>

00000452 <vfprintf>:
 452:	ab e0       	ldi	r26, 0x0B	; 11
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	ee e2       	ldi	r30, 0x2E	; 46
 458:	f2 e0       	ldi	r31, 0x02	; 2
 45a:	7d c2       	rjmp	.+1274   	; 0x956 <__prologue_saves__>
 45c:	6c 01       	movw	r12, r24
 45e:	7b 01       	movw	r14, r22
 460:	8a 01       	movw	r16, r20
 462:	fc 01       	movw	r30, r24
 464:	17 82       	std	Z+7, r1	; 0x07
 466:	16 82       	std	Z+6, r1	; 0x06
 468:	83 81       	ldd	r24, Z+3	; 0x03
 46a:	81 ff       	sbrs	r24, 1
 46c:	bf c1       	rjmp	.+894    	; 0x7ec <__stack+0x38d>
 46e:	ce 01       	movw	r24, r28
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	3c 01       	movw	r6, r24
 474:	f6 01       	movw	r30, r12
 476:	93 81       	ldd	r25, Z+3	; 0x03
 478:	f7 01       	movw	r30, r14
 47a:	93 fd       	sbrc	r25, 3
 47c:	85 91       	lpm	r24, Z+
 47e:	93 ff       	sbrs	r25, 3
 480:	81 91       	ld	r24, Z+
 482:	7f 01       	movw	r14, r30
 484:	88 23       	and	r24, r24
 486:	09 f4       	brne	.+2      	; 0x48a <__stack+0x2b>
 488:	ad c1       	rjmp	.+858    	; 0x7e4 <__stack+0x385>
 48a:	85 32       	cpi	r24, 0x25	; 37
 48c:	39 f4       	brne	.+14     	; 0x49c <__stack+0x3d>
 48e:	93 fd       	sbrc	r25, 3
 490:	85 91       	lpm	r24, Z+
 492:	93 ff       	sbrs	r25, 3
 494:	81 91       	ld	r24, Z+
 496:	7f 01       	movw	r14, r30
 498:	85 32       	cpi	r24, 0x25	; 37
 49a:	21 f4       	brne	.+8      	; 0x4a4 <__stack+0x45>
 49c:	b6 01       	movw	r22, r12
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	c0 d1       	rcall	.+896    	; 0x822 <fputc>
 4a2:	e8 cf       	rjmp	.-48     	; 0x474 <__stack+0x15>
 4a4:	91 2c       	mov	r9, r1
 4a6:	21 2c       	mov	r2, r1
 4a8:	31 2c       	mov	r3, r1
 4aa:	ff e1       	ldi	r31, 0x1F	; 31
 4ac:	f3 15       	cp	r31, r3
 4ae:	d8 f0       	brcs	.+54     	; 0x4e6 <__stack+0x87>
 4b0:	8b 32       	cpi	r24, 0x2B	; 43
 4b2:	79 f0       	breq	.+30     	; 0x4d2 <__stack+0x73>
 4b4:	38 f4       	brcc	.+14     	; 0x4c4 <__stack+0x65>
 4b6:	80 32       	cpi	r24, 0x20	; 32
 4b8:	79 f0       	breq	.+30     	; 0x4d8 <__stack+0x79>
 4ba:	83 32       	cpi	r24, 0x23	; 35
 4bc:	a1 f4       	brne	.+40     	; 0x4e6 <__stack+0x87>
 4be:	23 2d       	mov	r18, r3
 4c0:	20 61       	ori	r18, 0x10	; 16
 4c2:	1d c0       	rjmp	.+58     	; 0x4fe <__stack+0x9f>
 4c4:	8d 32       	cpi	r24, 0x2D	; 45
 4c6:	61 f0       	breq	.+24     	; 0x4e0 <__stack+0x81>
 4c8:	80 33       	cpi	r24, 0x30	; 48
 4ca:	69 f4       	brne	.+26     	; 0x4e6 <__stack+0x87>
 4cc:	23 2d       	mov	r18, r3
 4ce:	21 60       	ori	r18, 0x01	; 1
 4d0:	16 c0       	rjmp	.+44     	; 0x4fe <__stack+0x9f>
 4d2:	83 2d       	mov	r24, r3
 4d4:	82 60       	ori	r24, 0x02	; 2
 4d6:	38 2e       	mov	r3, r24
 4d8:	e3 2d       	mov	r30, r3
 4da:	e4 60       	ori	r30, 0x04	; 4
 4dc:	3e 2e       	mov	r3, r30
 4de:	2a c0       	rjmp	.+84     	; 0x534 <__stack+0xd5>
 4e0:	f3 2d       	mov	r31, r3
 4e2:	f8 60       	ori	r31, 0x08	; 8
 4e4:	1d c0       	rjmp	.+58     	; 0x520 <__stack+0xc1>
 4e6:	37 fc       	sbrc	r3, 7
 4e8:	2d c0       	rjmp	.+90     	; 0x544 <__stack+0xe5>
 4ea:	20 ed       	ldi	r18, 0xD0	; 208
 4ec:	28 0f       	add	r18, r24
 4ee:	2a 30       	cpi	r18, 0x0A	; 10
 4f0:	40 f0       	brcs	.+16     	; 0x502 <__stack+0xa3>
 4f2:	8e 32       	cpi	r24, 0x2E	; 46
 4f4:	b9 f4       	brne	.+46     	; 0x524 <__stack+0xc5>
 4f6:	36 fc       	sbrc	r3, 6
 4f8:	75 c1       	rjmp	.+746    	; 0x7e4 <__stack+0x385>
 4fa:	23 2d       	mov	r18, r3
 4fc:	20 64       	ori	r18, 0x40	; 64
 4fe:	32 2e       	mov	r3, r18
 500:	19 c0       	rjmp	.+50     	; 0x534 <__stack+0xd5>
 502:	36 fe       	sbrs	r3, 6
 504:	06 c0       	rjmp	.+12     	; 0x512 <__stack+0xb3>
 506:	8a e0       	ldi	r24, 0x0A	; 10
 508:	98 9e       	mul	r9, r24
 50a:	20 0d       	add	r18, r0
 50c:	11 24       	eor	r1, r1
 50e:	92 2e       	mov	r9, r18
 510:	11 c0       	rjmp	.+34     	; 0x534 <__stack+0xd5>
 512:	ea e0       	ldi	r30, 0x0A	; 10
 514:	2e 9e       	mul	r2, r30
 516:	20 0d       	add	r18, r0
 518:	11 24       	eor	r1, r1
 51a:	22 2e       	mov	r2, r18
 51c:	f3 2d       	mov	r31, r3
 51e:	f0 62       	ori	r31, 0x20	; 32
 520:	3f 2e       	mov	r3, r31
 522:	08 c0       	rjmp	.+16     	; 0x534 <__stack+0xd5>
 524:	8c 36       	cpi	r24, 0x6C	; 108
 526:	21 f4       	brne	.+8      	; 0x530 <__stack+0xd1>
 528:	83 2d       	mov	r24, r3
 52a:	80 68       	ori	r24, 0x80	; 128
 52c:	38 2e       	mov	r3, r24
 52e:	02 c0       	rjmp	.+4      	; 0x534 <__stack+0xd5>
 530:	88 36       	cpi	r24, 0x68	; 104
 532:	41 f4       	brne	.+16     	; 0x544 <__stack+0xe5>
 534:	f7 01       	movw	r30, r14
 536:	93 fd       	sbrc	r25, 3
 538:	85 91       	lpm	r24, Z+
 53a:	93 ff       	sbrs	r25, 3
 53c:	81 91       	ld	r24, Z+
 53e:	7f 01       	movw	r14, r30
 540:	81 11       	cpse	r24, r1
 542:	b3 cf       	rjmp	.-154    	; 0x4aa <__stack+0x4b>
 544:	98 2f       	mov	r25, r24
 546:	9f 7d       	andi	r25, 0xDF	; 223
 548:	95 54       	subi	r25, 0x45	; 69
 54a:	93 30       	cpi	r25, 0x03	; 3
 54c:	28 f4       	brcc	.+10     	; 0x558 <__stack+0xf9>
 54e:	0c 5f       	subi	r16, 0xFC	; 252
 550:	1f 4f       	sbci	r17, 0xFF	; 255
 552:	9f e3       	ldi	r25, 0x3F	; 63
 554:	99 83       	std	Y+1, r25	; 0x01
 556:	0d c0       	rjmp	.+26     	; 0x572 <__stack+0x113>
 558:	83 36       	cpi	r24, 0x63	; 99
 55a:	31 f0       	breq	.+12     	; 0x568 <__stack+0x109>
 55c:	83 37       	cpi	r24, 0x73	; 115
 55e:	71 f0       	breq	.+28     	; 0x57c <__stack+0x11d>
 560:	83 35       	cpi	r24, 0x53	; 83
 562:	09 f0       	breq	.+2      	; 0x566 <__stack+0x107>
 564:	55 c0       	rjmp	.+170    	; 0x610 <__stack+0x1b1>
 566:	20 c0       	rjmp	.+64     	; 0x5a8 <__stack+0x149>
 568:	f8 01       	movw	r30, r16
 56a:	80 81       	ld	r24, Z
 56c:	89 83       	std	Y+1, r24	; 0x01
 56e:	0e 5f       	subi	r16, 0xFE	; 254
 570:	1f 4f       	sbci	r17, 0xFF	; 255
 572:	88 24       	eor	r8, r8
 574:	83 94       	inc	r8
 576:	91 2c       	mov	r9, r1
 578:	53 01       	movw	r10, r6
 57a:	12 c0       	rjmp	.+36     	; 0x5a0 <__stack+0x141>
 57c:	28 01       	movw	r4, r16
 57e:	f2 e0       	ldi	r31, 0x02	; 2
 580:	4f 0e       	add	r4, r31
 582:	51 1c       	adc	r5, r1
 584:	f8 01       	movw	r30, r16
 586:	a0 80       	ld	r10, Z
 588:	b1 80       	ldd	r11, Z+1	; 0x01
 58a:	36 fe       	sbrs	r3, 6
 58c:	03 c0       	rjmp	.+6      	; 0x594 <__stack+0x135>
 58e:	69 2d       	mov	r22, r9
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	02 c0       	rjmp	.+4      	; 0x598 <__stack+0x139>
 594:	6f ef       	ldi	r22, 0xFF	; 255
 596:	7f ef       	ldi	r23, 0xFF	; 255
 598:	c5 01       	movw	r24, r10
 59a:	38 d1       	rcall	.+624    	; 0x80c <strnlen>
 59c:	4c 01       	movw	r8, r24
 59e:	82 01       	movw	r16, r4
 5a0:	f3 2d       	mov	r31, r3
 5a2:	ff 77       	andi	r31, 0x7F	; 127
 5a4:	3f 2e       	mov	r3, r31
 5a6:	15 c0       	rjmp	.+42     	; 0x5d2 <__stack+0x173>
 5a8:	28 01       	movw	r4, r16
 5aa:	22 e0       	ldi	r18, 0x02	; 2
 5ac:	42 0e       	add	r4, r18
 5ae:	51 1c       	adc	r5, r1
 5b0:	f8 01       	movw	r30, r16
 5b2:	a0 80       	ld	r10, Z
 5b4:	b1 80       	ldd	r11, Z+1	; 0x01
 5b6:	36 fe       	sbrs	r3, 6
 5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <__stack+0x161>
 5ba:	69 2d       	mov	r22, r9
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__stack+0x165>
 5c0:	6f ef       	ldi	r22, 0xFF	; 255
 5c2:	7f ef       	ldi	r23, 0xFF	; 255
 5c4:	c5 01       	movw	r24, r10
 5c6:	17 d1       	rcall	.+558    	; 0x7f6 <strnlen_P>
 5c8:	4c 01       	movw	r8, r24
 5ca:	f3 2d       	mov	r31, r3
 5cc:	f0 68       	ori	r31, 0x80	; 128
 5ce:	3f 2e       	mov	r3, r31
 5d0:	82 01       	movw	r16, r4
 5d2:	33 fc       	sbrc	r3, 3
 5d4:	19 c0       	rjmp	.+50     	; 0x608 <__stack+0x1a9>
 5d6:	82 2d       	mov	r24, r2
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	88 16       	cp	r8, r24
 5dc:	99 06       	cpc	r9, r25
 5de:	a0 f4       	brcc	.+40     	; 0x608 <__stack+0x1a9>
 5e0:	b6 01       	movw	r22, r12
 5e2:	80 e2       	ldi	r24, 0x20	; 32
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	1d d1       	rcall	.+570    	; 0x822 <fputc>
 5e8:	2a 94       	dec	r2
 5ea:	f5 cf       	rjmp	.-22     	; 0x5d6 <__stack+0x177>
 5ec:	f5 01       	movw	r30, r10
 5ee:	37 fc       	sbrc	r3, 7
 5f0:	85 91       	lpm	r24, Z+
 5f2:	37 fe       	sbrs	r3, 7
 5f4:	81 91       	ld	r24, Z+
 5f6:	5f 01       	movw	r10, r30
 5f8:	b6 01       	movw	r22, r12
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	12 d1       	rcall	.+548    	; 0x822 <fputc>
 5fe:	21 10       	cpse	r2, r1
 600:	2a 94       	dec	r2
 602:	21 e0       	ldi	r18, 0x01	; 1
 604:	82 1a       	sub	r8, r18
 606:	91 08       	sbc	r9, r1
 608:	81 14       	cp	r8, r1
 60a:	91 04       	cpc	r9, r1
 60c:	79 f7       	brne	.-34     	; 0x5ec <__stack+0x18d>
 60e:	e1 c0       	rjmp	.+450    	; 0x7d2 <__stack+0x373>
 610:	84 36       	cpi	r24, 0x64	; 100
 612:	11 f0       	breq	.+4      	; 0x618 <__stack+0x1b9>
 614:	89 36       	cpi	r24, 0x69	; 105
 616:	39 f5       	brne	.+78     	; 0x666 <__stack+0x207>
 618:	f8 01       	movw	r30, r16
 61a:	37 fe       	sbrs	r3, 7
 61c:	07 c0       	rjmp	.+14     	; 0x62c <__stack+0x1cd>
 61e:	60 81       	ld	r22, Z
 620:	71 81       	ldd	r23, Z+1	; 0x01
 622:	82 81       	ldd	r24, Z+2	; 0x02
 624:	93 81       	ldd	r25, Z+3	; 0x03
 626:	0c 5f       	subi	r16, 0xFC	; 252
 628:	1f 4f       	sbci	r17, 0xFF	; 255
 62a:	08 c0       	rjmp	.+16     	; 0x63c <__stack+0x1dd>
 62c:	60 81       	ld	r22, Z
 62e:	71 81       	ldd	r23, Z+1	; 0x01
 630:	07 2e       	mov	r0, r23
 632:	00 0c       	add	r0, r0
 634:	88 0b       	sbc	r24, r24
 636:	99 0b       	sbc	r25, r25
 638:	0e 5f       	subi	r16, 0xFE	; 254
 63a:	1f 4f       	sbci	r17, 0xFF	; 255
 63c:	f3 2d       	mov	r31, r3
 63e:	ff 76       	andi	r31, 0x6F	; 111
 640:	3f 2e       	mov	r3, r31
 642:	97 ff       	sbrs	r25, 7
 644:	09 c0       	rjmp	.+18     	; 0x658 <__stack+0x1f9>
 646:	90 95       	com	r25
 648:	80 95       	com	r24
 64a:	70 95       	com	r23
 64c:	61 95       	neg	r22
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	8f 4f       	sbci	r24, 0xFF	; 255
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	f0 68       	ori	r31, 0x80	; 128
 656:	3f 2e       	mov	r3, r31
 658:	2a e0       	ldi	r18, 0x0A	; 10
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	a3 01       	movw	r20, r6
 65e:	1d d1       	rcall	.+570    	; 0x89a <__ultoa_invert>
 660:	88 2e       	mov	r8, r24
 662:	86 18       	sub	r8, r6
 664:	44 c0       	rjmp	.+136    	; 0x6ee <__stack+0x28f>
 666:	85 37       	cpi	r24, 0x75	; 117
 668:	31 f4       	brne	.+12     	; 0x676 <__stack+0x217>
 66a:	23 2d       	mov	r18, r3
 66c:	2f 7e       	andi	r18, 0xEF	; 239
 66e:	b2 2e       	mov	r11, r18
 670:	2a e0       	ldi	r18, 0x0A	; 10
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	25 c0       	rjmp	.+74     	; 0x6c0 <__stack+0x261>
 676:	93 2d       	mov	r25, r3
 678:	99 7f       	andi	r25, 0xF9	; 249
 67a:	b9 2e       	mov	r11, r25
 67c:	8f 36       	cpi	r24, 0x6F	; 111
 67e:	c1 f0       	breq	.+48     	; 0x6b0 <__stack+0x251>
 680:	18 f4       	brcc	.+6      	; 0x688 <__stack+0x229>
 682:	88 35       	cpi	r24, 0x58	; 88
 684:	79 f0       	breq	.+30     	; 0x6a4 <__stack+0x245>
 686:	ae c0       	rjmp	.+348    	; 0x7e4 <__stack+0x385>
 688:	80 37       	cpi	r24, 0x70	; 112
 68a:	19 f0       	breq	.+6      	; 0x692 <__stack+0x233>
 68c:	88 37       	cpi	r24, 0x78	; 120
 68e:	21 f0       	breq	.+8      	; 0x698 <__stack+0x239>
 690:	a9 c0       	rjmp	.+338    	; 0x7e4 <__stack+0x385>
 692:	e9 2f       	mov	r30, r25
 694:	e0 61       	ori	r30, 0x10	; 16
 696:	be 2e       	mov	r11, r30
 698:	b4 fe       	sbrs	r11, 4
 69a:	0d c0       	rjmp	.+26     	; 0x6b6 <__stack+0x257>
 69c:	fb 2d       	mov	r31, r11
 69e:	f4 60       	ori	r31, 0x04	; 4
 6a0:	bf 2e       	mov	r11, r31
 6a2:	09 c0       	rjmp	.+18     	; 0x6b6 <__stack+0x257>
 6a4:	34 fe       	sbrs	r3, 4
 6a6:	0a c0       	rjmp	.+20     	; 0x6bc <__stack+0x25d>
 6a8:	29 2f       	mov	r18, r25
 6aa:	26 60       	ori	r18, 0x06	; 6
 6ac:	b2 2e       	mov	r11, r18
 6ae:	06 c0       	rjmp	.+12     	; 0x6bc <__stack+0x25d>
 6b0:	28 e0       	ldi	r18, 0x08	; 8
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <__stack+0x261>
 6b6:	20 e1       	ldi	r18, 0x10	; 16
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <__stack+0x261>
 6bc:	20 e1       	ldi	r18, 0x10	; 16
 6be:	32 e0       	ldi	r19, 0x02	; 2
 6c0:	f8 01       	movw	r30, r16
 6c2:	b7 fe       	sbrs	r11, 7
 6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <__stack+0x275>
 6c6:	60 81       	ld	r22, Z
 6c8:	71 81       	ldd	r23, Z+1	; 0x01
 6ca:	82 81       	ldd	r24, Z+2	; 0x02
 6cc:	93 81       	ldd	r25, Z+3	; 0x03
 6ce:	0c 5f       	subi	r16, 0xFC	; 252
 6d0:	1f 4f       	sbci	r17, 0xFF	; 255
 6d2:	06 c0       	rjmp	.+12     	; 0x6e0 <__stack+0x281>
 6d4:	60 81       	ld	r22, Z
 6d6:	71 81       	ldd	r23, Z+1	; 0x01
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	0e 5f       	subi	r16, 0xFE	; 254
 6de:	1f 4f       	sbci	r17, 0xFF	; 255
 6e0:	a3 01       	movw	r20, r6
 6e2:	db d0       	rcall	.+438    	; 0x89a <__ultoa_invert>
 6e4:	88 2e       	mov	r8, r24
 6e6:	86 18       	sub	r8, r6
 6e8:	fb 2d       	mov	r31, r11
 6ea:	ff 77       	andi	r31, 0x7F	; 127
 6ec:	3f 2e       	mov	r3, r31
 6ee:	36 fe       	sbrs	r3, 6
 6f0:	0d c0       	rjmp	.+26     	; 0x70c <__stack+0x2ad>
 6f2:	23 2d       	mov	r18, r3
 6f4:	2e 7f       	andi	r18, 0xFE	; 254
 6f6:	a2 2e       	mov	r10, r18
 6f8:	89 14       	cp	r8, r9
 6fa:	58 f4       	brcc	.+22     	; 0x712 <__stack+0x2b3>
 6fc:	34 fe       	sbrs	r3, 4
 6fe:	0b c0       	rjmp	.+22     	; 0x716 <__stack+0x2b7>
 700:	32 fc       	sbrc	r3, 2
 702:	09 c0       	rjmp	.+18     	; 0x716 <__stack+0x2b7>
 704:	83 2d       	mov	r24, r3
 706:	8e 7e       	andi	r24, 0xEE	; 238
 708:	a8 2e       	mov	r10, r24
 70a:	05 c0       	rjmp	.+10     	; 0x716 <__stack+0x2b7>
 70c:	b8 2c       	mov	r11, r8
 70e:	a3 2c       	mov	r10, r3
 710:	03 c0       	rjmp	.+6      	; 0x718 <__stack+0x2b9>
 712:	b8 2c       	mov	r11, r8
 714:	01 c0       	rjmp	.+2      	; 0x718 <__stack+0x2b9>
 716:	b9 2c       	mov	r11, r9
 718:	a4 fe       	sbrs	r10, 4
 71a:	0f c0       	rjmp	.+30     	; 0x73a <__stack+0x2db>
 71c:	fe 01       	movw	r30, r28
 71e:	e8 0d       	add	r30, r8
 720:	f1 1d       	adc	r31, r1
 722:	80 81       	ld	r24, Z
 724:	80 33       	cpi	r24, 0x30	; 48
 726:	21 f4       	brne	.+8      	; 0x730 <__stack+0x2d1>
 728:	9a 2d       	mov	r25, r10
 72a:	99 7e       	andi	r25, 0xE9	; 233
 72c:	a9 2e       	mov	r10, r25
 72e:	09 c0       	rjmp	.+18     	; 0x742 <__stack+0x2e3>
 730:	a2 fe       	sbrs	r10, 2
 732:	06 c0       	rjmp	.+12     	; 0x740 <__stack+0x2e1>
 734:	b3 94       	inc	r11
 736:	b3 94       	inc	r11
 738:	04 c0       	rjmp	.+8      	; 0x742 <__stack+0x2e3>
 73a:	8a 2d       	mov	r24, r10
 73c:	86 78       	andi	r24, 0x86	; 134
 73e:	09 f0       	breq	.+2      	; 0x742 <__stack+0x2e3>
 740:	b3 94       	inc	r11
 742:	a3 fc       	sbrc	r10, 3
 744:	10 c0       	rjmp	.+32     	; 0x766 <__stack+0x307>
 746:	a0 fe       	sbrs	r10, 0
 748:	06 c0       	rjmp	.+12     	; 0x756 <__stack+0x2f7>
 74a:	b2 14       	cp	r11, r2
 74c:	80 f4       	brcc	.+32     	; 0x76e <__stack+0x30f>
 74e:	28 0c       	add	r2, r8
 750:	92 2c       	mov	r9, r2
 752:	9b 18       	sub	r9, r11
 754:	0d c0       	rjmp	.+26     	; 0x770 <__stack+0x311>
 756:	b2 14       	cp	r11, r2
 758:	58 f4       	brcc	.+22     	; 0x770 <__stack+0x311>
 75a:	b6 01       	movw	r22, r12
 75c:	80 e2       	ldi	r24, 0x20	; 32
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	60 d0       	rcall	.+192    	; 0x822 <fputc>
 762:	b3 94       	inc	r11
 764:	f8 cf       	rjmp	.-16     	; 0x756 <__stack+0x2f7>
 766:	b2 14       	cp	r11, r2
 768:	18 f4       	brcc	.+6      	; 0x770 <__stack+0x311>
 76a:	2b 18       	sub	r2, r11
 76c:	02 c0       	rjmp	.+4      	; 0x772 <__stack+0x313>
 76e:	98 2c       	mov	r9, r8
 770:	21 2c       	mov	r2, r1
 772:	a4 fe       	sbrs	r10, 4
 774:	0f c0       	rjmp	.+30     	; 0x794 <__stack+0x335>
 776:	b6 01       	movw	r22, r12
 778:	80 e3       	ldi	r24, 0x30	; 48
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	52 d0       	rcall	.+164    	; 0x822 <fputc>
 77e:	a2 fe       	sbrs	r10, 2
 780:	16 c0       	rjmp	.+44     	; 0x7ae <__stack+0x34f>
 782:	a1 fc       	sbrc	r10, 1
 784:	03 c0       	rjmp	.+6      	; 0x78c <__stack+0x32d>
 786:	88 e7       	ldi	r24, 0x78	; 120
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 c0       	rjmp	.+4      	; 0x790 <__stack+0x331>
 78c:	88 e5       	ldi	r24, 0x58	; 88
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	b6 01       	movw	r22, r12
 792:	0c c0       	rjmp	.+24     	; 0x7ac <__stack+0x34d>
 794:	8a 2d       	mov	r24, r10
 796:	86 78       	andi	r24, 0x86	; 134
 798:	51 f0       	breq	.+20     	; 0x7ae <__stack+0x34f>
 79a:	a1 fe       	sbrs	r10, 1
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <__stack+0x343>
 79e:	8b e2       	ldi	r24, 0x2B	; 43
 7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <__stack+0x345>
 7a2:	80 e2       	ldi	r24, 0x20	; 32
 7a4:	a7 fc       	sbrc	r10, 7
 7a6:	8d e2       	ldi	r24, 0x2D	; 45
 7a8:	b6 01       	movw	r22, r12
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	3a d0       	rcall	.+116    	; 0x822 <fputc>
 7ae:	89 14       	cp	r8, r9
 7b0:	30 f4       	brcc	.+12     	; 0x7be <__stack+0x35f>
 7b2:	b6 01       	movw	r22, r12
 7b4:	80 e3       	ldi	r24, 0x30	; 48
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	34 d0       	rcall	.+104    	; 0x822 <fputc>
 7ba:	9a 94       	dec	r9
 7bc:	f8 cf       	rjmp	.-16     	; 0x7ae <__stack+0x34f>
 7be:	8a 94       	dec	r8
 7c0:	f3 01       	movw	r30, r6
 7c2:	e8 0d       	add	r30, r8
 7c4:	f1 1d       	adc	r31, r1
 7c6:	80 81       	ld	r24, Z
 7c8:	b6 01       	movw	r22, r12
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	2a d0       	rcall	.+84     	; 0x822 <fputc>
 7ce:	81 10       	cpse	r8, r1
 7d0:	f6 cf       	rjmp	.-20     	; 0x7be <__stack+0x35f>
 7d2:	22 20       	and	r2, r2
 7d4:	09 f4       	brne	.+2      	; 0x7d8 <__stack+0x379>
 7d6:	4e ce       	rjmp	.-868    	; 0x474 <__stack+0x15>
 7d8:	b6 01       	movw	r22, r12
 7da:	80 e2       	ldi	r24, 0x20	; 32
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	21 d0       	rcall	.+66     	; 0x822 <fputc>
 7e0:	2a 94       	dec	r2
 7e2:	f7 cf       	rjmp	.-18     	; 0x7d2 <__stack+0x373>
 7e4:	f6 01       	movw	r30, r12
 7e6:	86 81       	ldd	r24, Z+6	; 0x06
 7e8:	97 81       	ldd	r25, Z+7	; 0x07
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <__stack+0x391>
 7ec:	8f ef       	ldi	r24, 0xFF	; 255
 7ee:	9f ef       	ldi	r25, 0xFF	; 255
 7f0:	2b 96       	adiw	r28, 0x0b	; 11
 7f2:	e2 e1       	ldi	r30, 0x12	; 18
 7f4:	cc c0       	rjmp	.+408    	; 0x98e <__epilogue_restores__>

000007f6 <strnlen_P>:
 7f6:	fc 01       	movw	r30, r24
 7f8:	05 90       	lpm	r0, Z+
 7fa:	61 50       	subi	r22, 0x01	; 1
 7fc:	70 40       	sbci	r23, 0x00	; 0
 7fe:	01 10       	cpse	r0, r1
 800:	d8 f7       	brcc	.-10     	; 0x7f8 <strnlen_P+0x2>
 802:	80 95       	com	r24
 804:	90 95       	com	r25
 806:	8e 0f       	add	r24, r30
 808:	9f 1f       	adc	r25, r31
 80a:	08 95       	ret

0000080c <strnlen>:
 80c:	fc 01       	movw	r30, r24
 80e:	61 50       	subi	r22, 0x01	; 1
 810:	70 40       	sbci	r23, 0x00	; 0
 812:	01 90       	ld	r0, Z+
 814:	01 10       	cpse	r0, r1
 816:	d8 f7       	brcc	.-10     	; 0x80e <strnlen+0x2>
 818:	80 95       	com	r24
 81a:	90 95       	com	r25
 81c:	8e 0f       	add	r24, r30
 81e:	9f 1f       	adc	r25, r31
 820:	08 95       	ret

00000822 <fputc>:
 822:	0f 93       	push	r16
 824:	1f 93       	push	r17
 826:	cf 93       	push	r28
 828:	df 93       	push	r29
 82a:	fb 01       	movw	r30, r22
 82c:	23 81       	ldd	r18, Z+3	; 0x03
 82e:	21 fd       	sbrc	r18, 1
 830:	03 c0       	rjmp	.+6      	; 0x838 <fputc+0x16>
 832:	8f ef       	ldi	r24, 0xFF	; 255
 834:	9f ef       	ldi	r25, 0xFF	; 255
 836:	2c c0       	rjmp	.+88     	; 0x890 <fputc+0x6e>
 838:	22 ff       	sbrs	r18, 2
 83a:	16 c0       	rjmp	.+44     	; 0x868 <fputc+0x46>
 83c:	46 81       	ldd	r20, Z+6	; 0x06
 83e:	57 81       	ldd	r21, Z+7	; 0x07
 840:	24 81       	ldd	r18, Z+4	; 0x04
 842:	35 81       	ldd	r19, Z+5	; 0x05
 844:	42 17       	cp	r20, r18
 846:	53 07       	cpc	r21, r19
 848:	44 f4       	brge	.+16     	; 0x85a <fputc+0x38>
 84a:	a0 81       	ld	r26, Z
 84c:	b1 81       	ldd	r27, Z+1	; 0x01
 84e:	9d 01       	movw	r18, r26
 850:	2f 5f       	subi	r18, 0xFF	; 255
 852:	3f 4f       	sbci	r19, 0xFF	; 255
 854:	31 83       	std	Z+1, r19	; 0x01
 856:	20 83       	st	Z, r18
 858:	8c 93       	st	X, r24
 85a:	26 81       	ldd	r18, Z+6	; 0x06
 85c:	37 81       	ldd	r19, Z+7	; 0x07
 85e:	2f 5f       	subi	r18, 0xFF	; 255
 860:	3f 4f       	sbci	r19, 0xFF	; 255
 862:	37 83       	std	Z+7, r19	; 0x07
 864:	26 83       	std	Z+6, r18	; 0x06
 866:	14 c0       	rjmp	.+40     	; 0x890 <fputc+0x6e>
 868:	8b 01       	movw	r16, r22
 86a:	ec 01       	movw	r28, r24
 86c:	fb 01       	movw	r30, r22
 86e:	00 84       	ldd	r0, Z+8	; 0x08
 870:	f1 85       	ldd	r31, Z+9	; 0x09
 872:	e0 2d       	mov	r30, r0
 874:	09 95       	icall
 876:	89 2b       	or	r24, r25
 878:	e1 f6       	brne	.-72     	; 0x832 <fputc+0x10>
 87a:	d8 01       	movw	r26, r16
 87c:	16 96       	adiw	r26, 0x06	; 6
 87e:	8d 91       	ld	r24, X+
 880:	9c 91       	ld	r25, X
 882:	17 97       	sbiw	r26, 0x07	; 7
 884:	01 96       	adiw	r24, 0x01	; 1
 886:	17 96       	adiw	r26, 0x07	; 7
 888:	9c 93       	st	X, r25
 88a:	8e 93       	st	-X, r24
 88c:	16 97       	sbiw	r26, 0x06	; 6
 88e:	ce 01       	movw	r24, r28
 890:	df 91       	pop	r29
 892:	cf 91       	pop	r28
 894:	1f 91       	pop	r17
 896:	0f 91       	pop	r16
 898:	08 95       	ret

0000089a <__ultoa_invert>:
 89a:	fa 01       	movw	r30, r20
 89c:	aa 27       	eor	r26, r26
 89e:	28 30       	cpi	r18, 0x08	; 8
 8a0:	51 f1       	breq	.+84     	; 0x8f6 <__ultoa_invert+0x5c>
 8a2:	20 31       	cpi	r18, 0x10	; 16
 8a4:	81 f1       	breq	.+96     	; 0x906 <__ultoa_invert+0x6c>
 8a6:	e8 94       	clt
 8a8:	6f 93       	push	r22
 8aa:	6e 7f       	andi	r22, 0xFE	; 254
 8ac:	6e 5f       	subi	r22, 0xFE	; 254
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	8f 4f       	sbci	r24, 0xFF	; 255
 8b2:	9f 4f       	sbci	r25, 0xFF	; 255
 8b4:	af 4f       	sbci	r26, 0xFF	; 255
 8b6:	b1 e0       	ldi	r27, 0x01	; 1
 8b8:	3e d0       	rcall	.+124    	; 0x936 <__ultoa_invert+0x9c>
 8ba:	b4 e0       	ldi	r27, 0x04	; 4
 8bc:	3c d0       	rcall	.+120    	; 0x936 <__ultoa_invert+0x9c>
 8be:	67 0f       	add	r22, r23
 8c0:	78 1f       	adc	r23, r24
 8c2:	89 1f       	adc	r24, r25
 8c4:	9a 1f       	adc	r25, r26
 8c6:	a1 1d       	adc	r26, r1
 8c8:	68 0f       	add	r22, r24
 8ca:	79 1f       	adc	r23, r25
 8cc:	8a 1f       	adc	r24, r26
 8ce:	91 1d       	adc	r25, r1
 8d0:	a1 1d       	adc	r26, r1
 8d2:	6a 0f       	add	r22, r26
 8d4:	71 1d       	adc	r23, r1
 8d6:	81 1d       	adc	r24, r1
 8d8:	91 1d       	adc	r25, r1
 8da:	a1 1d       	adc	r26, r1
 8dc:	20 d0       	rcall	.+64     	; 0x91e <__ultoa_invert+0x84>
 8de:	09 f4       	brne	.+2      	; 0x8e2 <__ultoa_invert+0x48>
 8e0:	68 94       	set
 8e2:	3f 91       	pop	r19
 8e4:	2a e0       	ldi	r18, 0x0A	; 10
 8e6:	26 9f       	mul	r18, r22
 8e8:	11 24       	eor	r1, r1
 8ea:	30 19       	sub	r19, r0
 8ec:	30 5d       	subi	r19, 0xD0	; 208
 8ee:	31 93       	st	Z+, r19
 8f0:	de f6       	brtc	.-74     	; 0x8a8 <__ultoa_invert+0xe>
 8f2:	cf 01       	movw	r24, r30
 8f4:	08 95       	ret
 8f6:	46 2f       	mov	r20, r22
 8f8:	47 70       	andi	r20, 0x07	; 7
 8fa:	40 5d       	subi	r20, 0xD0	; 208
 8fc:	41 93       	st	Z+, r20
 8fe:	b3 e0       	ldi	r27, 0x03	; 3
 900:	0f d0       	rcall	.+30     	; 0x920 <__ultoa_invert+0x86>
 902:	c9 f7       	brne	.-14     	; 0x8f6 <__ultoa_invert+0x5c>
 904:	f6 cf       	rjmp	.-20     	; 0x8f2 <__ultoa_invert+0x58>
 906:	46 2f       	mov	r20, r22
 908:	4f 70       	andi	r20, 0x0F	; 15
 90a:	40 5d       	subi	r20, 0xD0	; 208
 90c:	4a 33       	cpi	r20, 0x3A	; 58
 90e:	18 f0       	brcs	.+6      	; 0x916 <__ultoa_invert+0x7c>
 910:	49 5d       	subi	r20, 0xD9	; 217
 912:	31 fd       	sbrc	r19, 1
 914:	40 52       	subi	r20, 0x20	; 32
 916:	41 93       	st	Z+, r20
 918:	02 d0       	rcall	.+4      	; 0x91e <__ultoa_invert+0x84>
 91a:	a9 f7       	brne	.-22     	; 0x906 <__ultoa_invert+0x6c>
 91c:	ea cf       	rjmp	.-44     	; 0x8f2 <__ultoa_invert+0x58>
 91e:	b4 e0       	ldi	r27, 0x04	; 4
 920:	a6 95       	lsr	r26
 922:	97 95       	ror	r25
 924:	87 95       	ror	r24
 926:	77 95       	ror	r23
 928:	67 95       	ror	r22
 92a:	ba 95       	dec	r27
 92c:	c9 f7       	brne	.-14     	; 0x920 <__ultoa_invert+0x86>
 92e:	00 97       	sbiw	r24, 0x00	; 0
 930:	61 05       	cpc	r22, r1
 932:	71 05       	cpc	r23, r1
 934:	08 95       	ret
 936:	9b 01       	movw	r18, r22
 938:	ac 01       	movw	r20, r24
 93a:	0a 2e       	mov	r0, r26
 93c:	06 94       	lsr	r0
 93e:	57 95       	ror	r21
 940:	47 95       	ror	r20
 942:	37 95       	ror	r19
 944:	27 95       	ror	r18
 946:	ba 95       	dec	r27
 948:	c9 f7       	brne	.-14     	; 0x93c <__ultoa_invert+0xa2>
 94a:	62 0f       	add	r22, r18
 94c:	73 1f       	adc	r23, r19
 94e:	84 1f       	adc	r24, r20
 950:	95 1f       	adc	r25, r21
 952:	a0 1d       	adc	r26, r0
 954:	08 95       	ret

00000956 <__prologue_saves__>:
 956:	2f 92       	push	r2
 958:	3f 92       	push	r3
 95a:	4f 92       	push	r4
 95c:	5f 92       	push	r5
 95e:	6f 92       	push	r6
 960:	7f 92       	push	r7
 962:	8f 92       	push	r8
 964:	9f 92       	push	r9
 966:	af 92       	push	r10
 968:	bf 92       	push	r11
 96a:	cf 92       	push	r12
 96c:	df 92       	push	r13
 96e:	ef 92       	push	r14
 970:	ff 92       	push	r15
 972:	0f 93       	push	r16
 974:	1f 93       	push	r17
 976:	cf 93       	push	r28
 978:	df 93       	push	r29
 97a:	cd b7       	in	r28, 0x3d	; 61
 97c:	de b7       	in	r29, 0x3e	; 62
 97e:	ca 1b       	sub	r28, r26
 980:	db 0b       	sbc	r29, r27
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	f8 94       	cli
 986:	de bf       	out	0x3e, r29	; 62
 988:	0f be       	out	0x3f, r0	; 63
 98a:	cd bf       	out	0x3d, r28	; 61
 98c:	09 94       	ijmp

0000098e <__epilogue_restores__>:
 98e:	2a 88       	ldd	r2, Y+18	; 0x12
 990:	39 88       	ldd	r3, Y+17	; 0x11
 992:	48 88       	ldd	r4, Y+16	; 0x10
 994:	5f 84       	ldd	r5, Y+15	; 0x0f
 996:	6e 84       	ldd	r6, Y+14	; 0x0e
 998:	7d 84       	ldd	r7, Y+13	; 0x0d
 99a:	8c 84       	ldd	r8, Y+12	; 0x0c
 99c:	9b 84       	ldd	r9, Y+11	; 0x0b
 99e:	aa 84       	ldd	r10, Y+10	; 0x0a
 9a0:	b9 84       	ldd	r11, Y+9	; 0x09
 9a2:	c8 84       	ldd	r12, Y+8	; 0x08
 9a4:	df 80       	ldd	r13, Y+7	; 0x07
 9a6:	ee 80       	ldd	r14, Y+6	; 0x06
 9a8:	fd 80       	ldd	r15, Y+5	; 0x05
 9aa:	0c 81       	ldd	r16, Y+4	; 0x04
 9ac:	1b 81       	ldd	r17, Y+3	; 0x03
 9ae:	aa 81       	ldd	r26, Y+2	; 0x02
 9b0:	b9 81       	ldd	r27, Y+1	; 0x01
 9b2:	ce 0f       	add	r28, r30
 9b4:	d1 1d       	adc	r29, r1
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	f8 94       	cli
 9ba:	de bf       	out	0x3e, r29	; 62
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	cd bf       	out	0x3d, r28	; 61
 9c0:	ed 01       	movw	r28, r26
 9c2:	08 95       	ret

000009c4 <_exit>:
 9c4:	f8 94       	cli

000009c6 <__stop_program>:
 9c6:	ff cf       	rjmp	.-2      	; 0x9c6 <__stop_program>
